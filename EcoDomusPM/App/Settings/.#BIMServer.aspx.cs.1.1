using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using EcoDomus.Session;
using System.IO;
using Telerik.Web.UI;
using System.Data;
using System.Threading;
using System.Globalization;
using System.Text.RegularExpressions;
using Locations;
using Asset;
using System.Web.Configuration;

public partial class App_Settings_BIMServer : System.Web.UI.Page
{
    Guid FileID;
    string filepath = string.Empty;
    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            if (SessionController.Users_.UserId != null)
            {

                if (!IsPostBack)
                {
                    if (SessionController.Users_.is_PM_FM == "PM")
                    {
                        GetUploadedFilesPM();
                       
                    }
                    else
                    {
                        GetUploadedFiles();
                       
                        Session["name"] = null;
                    }
                }
                else
                {
                    if (navis_view.InnerHtml.Trim() != "")
                        navis_view.InnerHtml = "";
                }
            }
            else
            {
                Response.Redirect("~\\app\\LoginPM.aspx?Error=Session");
            }

            BindFacility();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    protected void page_prerender(object sender, EventArgs e)
    {
        if (SessionController.Users_.IsFacility == "yes")
        {
            lnk_assgnFacility.Visible = false;
            hfselectedId.Value = "";
            hfselectedname.Value = "";
          
        }
        else
        {
            lnk_assgnFacility.Visible = true;

        }
    }
    private void BindFacility()
    {
        try
        {
            DataSet ds_facility = new DataSet();
            LocationsClient locObj_crtl = new LocationsClient();
            LocationsModel locObj_mdl = new LocationsModel();
            locObj_mdl.User_id = new Guid(SessionController.Users_.UserId);
            ds_facility = locObj_crtl.Get_Facility(SessionController.ConnectionString, locObj_mdl);
            cmbfacility.DataTextField = "name";
            cmbfacility.DataValueField = "ID";
            cmbfacility.DataSource = ds_facility;
            cmbfacility.DataBind();

            if (SessionController.Users_.IsFacility == "yes")
            {
                cmbfacility.Visible = true;
               
                cmbfacility.SelectedValue = SessionController.Users_.facilityID;
                cmbfacility.Enabled = false;
            }
            else
            {
                cmbfacility.Visible = true;
                 cmbfacility.Enabled = true;
            }

        }
        catch (Exception ex)
        {
        }
    }

    public void GetUploadedFilesPM()
    {
        try
        {
            DataSet ds = new DataSet();
            BIMModel.BIMModelClient BIMModelClient = new BIMModel.BIMModelClient();
            BIMModel.BIMModels mdl = new BIMModel.BIMModels();
            string p = SessionController.Users_.ProjectId.ToString();

            mdl.Project_id =new Guid(SessionController.Users_.ProjectId.ToString());
            ds = BIMModelClient.GetUploadedFilesModelServerPM(mdl, SessionController.ConnectionString);
            rguploadedfiles.DataSource = ds;
            rguploadedfiles.DataBind();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void GetUploadedFiles()
    {
        try
        {
            DataSet ds = new DataSet();
            BIMModel.BIMModelClient BIMModelClient = new BIMModel.BIMModelClient();
            BIMModel.BIMModels mdl = new BIMModel.BIMModels();

            //mdl.Fk_facility_id = new Guid(SessionController.Users_.facilityID);
            mdl.Fk_facility_id = new Guid(hfselectedId.Value.ToString());

            ds = BIMModelClient.getuploadedfiles(mdl, SessionController.ConnectionString);

            rguploadedfiles.DataSource = ds;
            rguploadedfiles.DataBind();

        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    protected void btnSubmit_Click(object sender, EventArgs e)
    {
        UploadFile(Guid.Empty);
        GetUploadedFilesPM();
        hfselectedId.Value = "";
    }

    protected override void InitializeCulture()
    {
        try
        {
            string culture = Session["Culture"].ToString();
            if (culture == null)
            {
                culture = "en-US";
            }
            Thread.CurrentThread.CurrentUICulture = new CultureInfo(culture);
            Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(culture);
        }
        catch (Exception ex)
        {

            redirect_page("~\\app\\Loginpm.aspx?Error=Session");
        }

    }

    public void redirect_page(string url)
    {

        Response.Redirect(url, false);

    }
      
    private void UploadFile(Guid selected_fileid)
    {
        try
        {
            string nwdfilepath = System.Configuration.ConfigurationManager.AppSettings["NWDFilesPath"].ToString();
            //string strfacilityName = SessionController.Users_.facilityID.ToString();
                string strfacilityName;
                if (!string.IsNullOrEmpty(hfselectedId.Value.ToString()))
                    {
                    strfacilityName = hfselectedId.Value.ToString();
                    }
                else
                    {
                    strfacilityName = Request.Form["rdselect"].Split(',')[1];
                    }


            string strDirExists5 = string.Empty;

            strDirExists5 = Server.MapPath(nwdfilepath + strfacilityName);

            DirectoryInfo de5 = new DirectoryInfo(strDirExists5);

            if (!de5.Exists)
            {
                de5.Create();
            }
            foreach (UploadedFile f in ruImportLocation.UploadedFiles)
            {
                string filename = string.Empty;
                filename = f.GetName();
                filename = filename.Replace("&", "_");
                filename = filename.Replace("#", "_");
                filename = filename.Replace("%", "_");
                filename = filename.Replace("*", "_");
                filename = filename.Replace("{", "_");
                filename = filename.Replace("}", "_");
                filename = filename.Replace("\\", "_");
                filename = filename.Replace(":", "_");
                filename = filename.Replace("<", "_");
                filename = filename.Replace(">", "_");
                filename = filename.Replace("?", "_");
                filename = filename.Replace("/", "_");
                hfifcxmlpath.Value = f.GetName();



                if (filename.Substring(filename.Length - 3, 3).ToString().ToLower() == "nwd")
                {
                    string file_path;
                    // file_path =
                    filepath = Path.Combine(Server.MapPath(nwdfilepath + strfacilityName), filename);
                    //MessageBox(filepath);
                    f.SaveAs(filepath, true);
                    SaveNWDFileName(filename, filepath, f.ContentLength,selected_fileid);


                }
            }
        }

        catch (Exception ex)
        {
            throw ex;

        }
    }
    public void SaveNWDFileName(string filename, string filepath, int filesize, Guid selected_fileid)
    {
        try
        {
            BIMModel.BIMModelClient BIMModelClient = new BIMModel.BIMModelClient();
            BIMModel.BIMModels mdl = new BIMModel.BIMModels();

            filesize = filesize/(1024*1024);
            mdl.File_name = filename;

            mdl.File_path = filepath;
            //mdl.File_name = filename.Substring(filename.Length - 3, 3).ToString().ToLower().ToString();
            mdl.File_type = "M";
            mdl.Filesize = filesize.ToString() + " MB";
            //if (SessionController.Users_.IsFacility == "yes")
            //{
            //    mdl.Fk_facility_id = new Guid(SessionController.Users_.facilityID);
            //}
            //else
            //{
            if (hfselectedId.Value == "")
                {
                hfselected_fileid.Value = Request.Form["rdselect"].Split(',')[1];
                mdl.Fk_facility_id = new Guid(hfselected_fileid.Value);
                }
            else
                {
                mdl.Fk_facility_id = new Guid(hfselectedId.Value);
                }

                
            //}
            mdl.Uploaded_by = new Guid(SessionController.Users_.UserId);

            //*******//
            mdl.Pk_file_Id  = selected_fileid.ToString();
            //bindselectedlocations();
            //nvm.facility_id = new Guid(ddlFacility.SelectedValue);
            DataSet ds = new DataSet();
            ds = BIMModelClient.InsertUpdateBIMModel(mdl, SessionController.ConnectionString);

            fileid.Value = ds.Tables[0].Rows[0]["file_id"].ToString();

            //navis_fileID = new Guid(ds.Tables[1].Rows[0]["fileid"].ToString());

            //rtvLocation.ClearCheckedNodes();

            string file_path_return = ds.Tables[0].Rows[0]["file_path_return"].ToString();
            //file_path_return = "~" + ds.Tables[0].Rows[0]["file_path_return"].ToString();

            if (ds.Tables[0].Rows[0]["Status"].ToString() == "Exists")
            {
                MessageBox("The file  " + filename + " already exists for this project.");
            }
            else
            {
                load_activex(file_path_return);
            }
        }

        catch (Exception ex)
        {
            throw ex;
        }
    }
    public void load_activex(string file_path)
    {
        string mappath, navis_class_id;


        navis_class_id = "CLSID:2B72955E-067A-4260-AEF5-44746A775C53";
        //mappath = "<p  style='text-align: center'><object id='NWControl01' classid='" + navis_class_id + "' codebase='../../Bin/Navisworks ActiveX Redistributable Setup.exe'><param name='_cx' value='240000'><param name='_cy' value='10000'>";
        mappath = "<p  style='text-align: center'><object id='NWControl01' width='5px' height='5px' classid='" + navis_class_id + "' codebase='../../Bin/Navisworks ActiveX Redistributable Setup.exe'><param name='_cx' value='240000'><param name='_cy' value='10000'>";
        string temppath = Server.MapPath(file_path);
        mappath = mappath + "<param name='SRC' value='" + Request.Url.GetLeftPart(UriPartial.Authority) + file_path + "'></object></p>";
        //mappath = mappath + "<param name='SRC' value='" + temppath + "'></object></p>";
        navis_view.InnerHtml = mappath;
        
       // Page.ClientScript.RegisterStartupScript(this.GetType(), "script4", "<script language='javascript'>btnextactclick()</script>");

       
    }

    protected void MessageBox(string msg)
    {
        Label lbl = new Label();
        lbl.Text = "<script language='javascript'>" + Environment.NewLine + "window.alert('" + msg + "')</script>";
        Page.Controls.Add(lbl);
    }
    protected void rguploadedfiles_OnPageIndexChanged(object sender, Telerik.Web.UI.GridPageChangedEventArgs e)
    {
        GetUploadedFilesPM();
    }
    protected void rguploadedfiles_PageSizeChanged(object sender, Telerik.Web.UI.GridPageSizeChangedEventArgs e)
    {
        GetUploadedFilesPM();
    }
    protected void rguploadedfiles_SortCommand(object sender, Telerik.Web.UI.GridSortCommandEventArgs e)
    {
        GetUploadedFilesPM();
    }
    protected void rguploadedfiles_ItemDataBound(object sender, GridItemEventArgs e)
    {
        try
        {


            if (e.Item is Telerik.Web.UI.GridDataItem)
            {

                Button btn_bim = e.Item.FindControl("btn_bim") as Button;


   //prevoious  //btn_bim.Attributes.Add("onclick", "javascript:return jump_model('" + e.Item.Cells[3].Text + "','"+e.Item.Cells[4].Text+"')");
                btn_bim.Attributes.Add("onclick", "javascript:return jump_model('" + e.Item.Cells[3].Text + "','" + e.Item.Cells[4].Text + "','" + e.Item.Cells[8].Text + "')");
                
                //if (e.Item.Cells[11].Text == "N")
                //{

                btn_bim.Visible = true;
                //}
                //else
                //{
                //    btn_bim.Visible = false;

                //}
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    protected void btn_extract_data_OnClick(object sender, EventArgs e)
    {     
        hf_view_pt.Value = hf_view_pt.Value;
        insert_view_pt();

        ScriptManager.RegisterStartupScript(this, this.GetType(), "message", "javascript:message();", true);
    }
     private void insert_view_pt()
    {
        DataSet ds=new DataSet();
        BIMModel.BIMModelClient BIMModelClient = new BIMModel.BIMModelClient();
        BIMModel.BIMModels mdl = new BIMModel.BIMModels();
        mdl.File_id = new Guid(fileid.Value);
        mdl.Navis_view_points = hf_view_pt.Value;
        BIMModelClient.InsertviewPoints(mdl, SessionController.ConnectionString);
        
    }


     protected void DeleteUplodedFile(Guid FileID)
     {
         string filename = string.Empty;
         String facilityId=string.Empty; 
         try
         {

             BIMModel.BIMModelClient BIMModelClient = new BIMModel.BIMModelClient();
             BIMModel.BIMModels mdl = new BIMModel.BIMModels();
             DataSet ds = new DataSet();
             Regex name = new Regex("OtherFiles");
             

             mdl.File_id = FileID;
             ds = BIMModelClient.GetUploadedFileDetails(mdl, SessionController.ConnectionString);
             filename = Convert.ToString(ds.Tables[0].Rows[0]["file_name"]);
             if(filename!="")
             {
            
             facilityId=Convert.ToString(ds.Tables[0].Rows[0]["fk_facility_id"]);  
             Match file_path_string = name.Match(ds.Tables[0].Rows[0]["file_path"].ToString());


             if (filename.Substring((filename.Length - 3), 3).ToString() == "ifc")
             {
                 filepath = Server.MapPath("~/App/Files/" + facilityId + "/" + filename);
             }
             else
                 if (filename.Substring((filename.Length - 3), 3).ToString() == "xls")
                 {
                     filepath = Server.MapPath("~/App/Files/Documents" + facilityId + "/" + filename);
                 }
                 else

                     if (filename.Substring((filename.Length - 3), 3).ToString() == "xml")
                     {
                         filepath = Server.MapPath("~/App/Files/NWD Files/" + facilityId + "/" + filename);
                     }
                     else

                         if (filename.Substring((filename.Length - 6), 6).ToString().ToLower() == "ifcxml")
                         {
                             filepath = Server.MapPath("~/App/BIM/UploadedFiles/IFCXmlFiles/" + facilityId + "/" + filename);
                         }
                         else
                         {
                             if (filename.Substring((filename.Length - 3), 3).ToString().ToLower() == "nwd")
                             {
                                 if (file_path_string.Success)
                                 {
                                     filepath = ds.Tables[0].Rows[0]["file_path"].ToString();
                                 }
                                 else
                                 {
                                     filepath = Server.MapPath(ds.Tables[0].Rows[0]["file_path"].ToString());
                                   
                                 }
                             }
                             else
                                 filepath = Server.MapPath("~/App/Files/" + facilityId + "/" + filename);
                         }

             if (Directory.Exists(filepath))
             {
                      string[] files = Directory.GetFiles(filepath);
                      string[] dirs = Directory.GetDirectories(filepath);

                              foreach (string file in files)
                                   {
                                     //added on 21-05-12 ---------------------------------------- 
                                     string completefilepath = file;
                                     int index = completefilepath.LastIndexOf('\\');
                                     string actual_file = completefilepath.Substring(index + 1);

                                     if (filename == actual_file)
                                     {
                                      //--------------------------------------------------------
                                         File.SetAttributes(file, FileAttributes.Normal);
                                         File.Delete(file);
                                     }
                                   }
                                            
                 // Directory.Delete(filepath, false);
    
             }

             if (File.Exists(filepath))
             {
                 FileInfo file = new FileInfo(filepath);
                 file.Delete();
             }

             BIMModelClient.DeleteUploadedFile(mdl, SessionController.ConnectionString);
             GetUploadedFilesPM();
             }
             else
             {}
         }

         catch (Exception ex)
         {
             throw ex;
         }
     }

     protected void rguploadedfiles_OnItemCommand(object sender, GridCommandEventArgs e)
     {
         try
         {
             if (e.CommandName == "delete")
             {
                 FileID = new Guid(e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["pk_uploaded_file_id"].ToString());
                 DeleteUplodedFile(FileID);
             }
            

         }
         catch (Exception ex)
         {
             throw ex;
         }

     }
     protected void btnreplace_Click(object sender, EventArgs e)
     {
         try
         {
             //Following if and else conditions are added by Priyanka J on 03rd May,2012
             if (Request.Form["rdselect"] != null)
             {
                 hfselected_fileid.Value = Request.Form["rdselect"].Split(',')[0];
                 UploadFile(new Guid(hfselected_fileid.Value.ToString()));
                 GetUploadedFilesPM();
             }
             else
             {
                 Page.ClientScript.RegisterStartupScript(this.GetType(), "script4", "<script language='javascript'>result_msg('Please select file to replace.')</script>");
             }
         }
          catch (Exception ex)
         {
             
             throw ex;
         }
     }
     protected void btn_download_Click(object sender, EventArgs e)
     {
         try
         {
             DataSet ds = new DataSet();
             BIMModel.BIMModelClient BIMModelClient = new BIMModel.BIMModelClient();
             BIMModel.BIMModels mdl = new BIMModel.BIMModels();

                 if (Request.Form["rdselect"] != null)
                 {
                     hfselected_fileid.Value = Request.Form["rdselect"].Split(',')[0];
                 
                     if (!(hfselected_fileid.Value == null || hfselected_fileid.Value.ToString().Equals("")))
                     {
                         mdl.File_id = new Guid(hfselected_fileid.Value);
                         ds = BIMModelClient.proc_get_file_path_by_id(mdl, SessionController.ConnectionString);
                          if (ds.Tables[0].Rows.Count > 0)
                         {
                             Response.Redirect(ds.Tables[0].Rows[0]["file_path"].ToString());
                             // Server.Transfer("testfm.ecodomus.com+ds.Tables[0].Rows[0]["file_path"].ToString()));

                         }
                     }
                 }
                 else
                 {
                     Page.ClientScript.RegisterStartupScript(this.GetType(), "script4", "<script language='javascript'>result_msg('Please select file to download.')</script>");
                 }
            
         }
         catch (Exception ex)
         {

             throw ex;
         }
     }
}